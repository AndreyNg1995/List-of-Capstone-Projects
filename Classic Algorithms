Question: Collatz Conjecture - Start with a number n > 1. Find the number of steps it takes to reach one using the following process: 
If n is even, divide it by 2. If n is odd, multiply it by 3 and add 1.
Solution 1:
def number_step_n(n):
    i = 0
    while n>1:
        if n%2==0:
            n=n/2
            i+=1
        else:
            n=n*3+1
            i+=1
    return i
Solution 2:
def collatzRecur(curNum, count=0):
    '''This recursively solves the Collatz Conjecture'''
    if curNum<=1:#Base case
        return count
    if curNum%2==0:
        return collatzRecur(curNum/2, count+1)
    else:
        return collatzRecur(curNum*3+1, count+1)
#Some tests
print collatzRecur(2) #1
print collatzRecur(3) #7
print collatzRecur(4) #2
print collatzRecur(5) #5
print collatzRecur(6) #8
--------------------------------------------------------------------------------------------------------------------------------------
Question: Sorting - Implement two types of sorting algorithms: Merge sort and bubble sort
Solution :
import random


def merge(lst0, lst1):
    ret = []
    while lst0 and lst1:
        if lst0[0] <= lst1[0]:
            ret.append(lst0.pop(0))
        else:
            ret.append(lst1.pop(0))
    ret.extend(lst0)
    ret.extend(lst1)
    return ret


def mergesort(lst):
    if len(lst) <= 1:
        return lst
    # random to avoid dead loop for special sequence
    r = lst[random.randint(0, len(lst) - 1)]
    left, mid, right = [], [], []
    for i in lst:
        if i < r:
            left.append(i)
        elif i == r:
            mid.append(i)
        else:
            right.append(i)
    left = mergesort(left)
    left.extend(mid)
    right = mergesort(right)
    ret = merge(left, right)
    return ret


if __name__ == "__main__":
    print("please input integer number array")
    lst = []
    while 1:
        try:
            n = raw_input(">")
        except:
            print("")
            break
        lst.extend([int(i) for i in n.split()])
    print ("origin: ", lst)
    print ("sorted: ", mergesort(lst))
--------------------------------------------------------------------------------------------------------------------------------------
Question: Closest pair problem - The closest pair of points problem or closest pair problem is a problem of computational geometry:
given n points in metric space, find a pair of points with the smallest distance between them
Solution:

    

